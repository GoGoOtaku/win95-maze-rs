use std::mem;
use std::ptr;
use std::ffi::CStr;

use gl;
use gl::types::*;
use cgmath::{Matrix4, Deg, Vector3};

use shader::Shader;

const VERTICES: [f32; 360] = [
     0.      ,  0.     , -1.      ,  0.1875965, -0.5773537, -0.794651 ,
     0.7236  , -0.52572, -0.447215,  0.1875965, -0.5773537, -0.794651 ,
    -0.276385, -0.85064, -0.447215,  0.1875965, -0.5773537, -0.794651 ,
     0.7236  , -0.52572, -0.447215,  0.6070647,  0.       , -0.7946525,
     0.      ,  0.     , -1.      ,  0.6070647,  0.       , -0.7946525,
     0.7236  ,  0.52572, -0.447215,  0.6070647,  0.       , -0.7946525,
     0.      ,  0.     , -1.      , -0.4911221, -0.356829 , -0.7946522,
    -0.276385, -0.85064, -0.447215, -0.4911221, -0.356829 , -0.7946522,
    -0.894425,  0.     , -0.447215, -0.4911221, -0.356829 , -0.7946522,
     0.      ,  0.     , -1.      , -0.4911221,  0.356829 , -0.7946522,
    -0.894425,  0.     , -0.447215, -0.4911221,  0.356829 , -0.7946522,
    -0.276385,  0.85064, -0.447215, -0.4911221,  0.356829 , -0.7946522,
     0.      ,  0.     , -1.      ,  0.1875965,  0.5773537, -0.794651 ,
    -0.276385,  0.85064, -0.447215,  0.1875965,  0.5773537, -0.794651 ,
     0.7236  ,  0.52572, -0.447215,  0.1875965,  0.5773537, -0.794651 ,
     0.7236  , -0.52572, -0.447215,  0.9822462,  0.       , -0.1875968,
     0.7236  ,  0.52572, -0.447215,  0.9822462,  0.       , -0.1875968,
     0.894425,  0.     ,  0.447215,  0.9822462,  0.       , -0.1875968,
    -0.276385, -0.85064, -0.447215,  0.3035356, -0.9341716, -0.1875891,
     0.7236  , -0.52572, -0.447215,  0.3035356, -0.9341716, -0.1875891,
     0.276385, -0.85064,  0.447215,  0.3035356, -0.9341716, -0.1875891,
    -0.894425,  0.     , -0.447215, -0.7946492, -0.5773594, -0.1875869,
    -0.276385, -0.85064, -0.447215, -0.7946492, -0.5773594, -0.1875869,
    -0.7236  , -0.52572,  0.447215, -0.7946492, -0.5773594, -0.1875869,
    -0.276385,  0.85064, -0.447215, -0.7946492,  0.5773594, -0.1875869,
    -0.894425,  0.     , -0.447215, -0.7946492,  0.5773594, -0.1875869,
    -0.7236  ,  0.52572,  0.447215, -0.7946492,  0.5773594, -0.1875869,
     0.7236  ,  0.52572, -0.447215,  0.3035356,  0.9341716, -0.1875891,
    -0.276385,  0.85064, -0.447215,  0.3035356,  0.9341716, -0.1875891,
     0.276385,  0.85064,  0.447215,  0.3035356,  0.9341716, -0.1875891,
     0.7236  , -0.52572, -0.447215,  0.7946492, -0.5773594,  0.1875869,
     0.894425,  0.     ,  0.447215,  0.7946492, -0.5773594,  0.1875869,
     0.276385, -0.85064,  0.447215,  0.7946492, -0.5773594,  0.1875869,
    -0.276385, -0.85064, -0.447215, -0.3035356, -0.9341716,  0.1875892,
     0.276385, -0.85064,  0.447215, -0.3035356, -0.9341716,  0.1875892,
    -0.7236  , -0.52572,  0.447215, -0.3035356, -0.9341716,  0.1875892,
    -0.894425,  0.     , -0.447215, -0.9822462,  0.       ,  0.1875968,
    -0.7236  , -0.52572,  0.447215, -0.9822462,  0.       ,  0.1875968,
    -0.7236  ,  0.52572,  0.447215, -0.9822462,  0.       ,  0.1875968,
    -0.276385,  0.85064, -0.447215, -0.3035356,  0.9341716,  0.1875892,
    -0.7236  ,  0.52572,  0.447215, -0.3035356,  0.9341716,  0.1875892,
     0.276385,  0.85064,  0.447215, -0.3035356,  0.9341716,  0.1875892,
     0.7236  ,  0.52572, -0.447215,  0.7946492,  0.5773594,  0.1875869,
     0.276385,  0.85064,  0.447215,  0.7946492,  0.5773594,  0.1875869,
     0.894425,  0.     ,  0.447215,  0.7946492,  0.5773594,  0.1875869,
     0.276385, -0.85064,  0.447215,  0.4911221, -0.356829 ,  0.7946522,
     0.894425,  0.     ,  0.447215,  0.4911221, -0.356829 ,  0.7946522,
     0.      ,  0.     ,  1.      ,  0.4911221, -0.356829 ,  0.7946522,
    -0.7236  , -0.52572,  0.447215, -0.1875965, -0.5773537,  0.7946512,
     0.276385, -0.85064,  0.447215, -0.1875965, -0.5773537,  0.7946512,
     0.      ,  0.     ,  1.      , -0.1875965, -0.5773537,  0.7946512,
    -0.7236  ,  0.52572,  0.447215, -0.6070647,  0.       ,  0.7946525,
    -0.7236  , -0.52572,  0.447215, -0.6070647,  0.       ,  0.7946525,
     0.      ,  0.     ,  1.      , -0.6070647,  0.       ,  0.7946525,
     0.276385,  0.85064,  0.447215, -0.1875965,  0.5773537,  0.794651 ,
    -0.7236  ,  0.52572,  0.447215, -0.1875965,  0.5773537,  0.794651 ,
     0.      ,  0.     ,  1.      , -0.1875965,  0.5773537,  0.794651 ,
     0.894425,  0.     ,  0.447215,  0.4911221,  0.356829 ,  0.7946522,
     0.276385,  0.85064,  0.447215,  0.4911221,  0.356829 ,  0.7946522,
     0.      ,  0.     ,  1.      ,  0.4911221,  0.356829 ,  0.7946522
];

#[derive(Debug)]
pub struct Ico {
    pub pos: Vector3<f32>,
    pub axis: Vector3<f32>,
    pub active: bool
}

#[derive(Debug)]
pub struct IcoRenderer {
    vao: GLuint,
    vbo: GLuint
}

impl IcoRenderer {

    pub unsafe fn new() -> IcoRenderer {
        let (mut vao, mut vbo) = (0, 0);

        //* generate VAO, VBO, EBO
        gl::GenVertexArrays(1, &mut vao);
        gl::GenBuffers(1, &mut vbo);

        //* binding VAO
        gl::BindVertexArray(vao);

        //* VBO data
        gl::BindBuffer(gl::ARRAY_BUFFER, vbo);
        gl::BufferData(gl::ARRAY_BUFFER,
                       mem::size_of::<[f32; 360]>() as isize,
                       &VERTICES[0] as *const f32 as *const _,
                       gl::STATIC_DRAW);

        //* vertex attribs
        // aPos = 0
        gl::VertexAttribPointer(0, 3, gl::FLOAT, gl::FALSE,
                                6 * mem::size_of::<GLfloat>() as GLint,
                                ptr::null());
        gl::EnableVertexAttribArray(0);
        // aNor = 2
        gl::VertexAttribPointer(2, 3, gl::FLOAT, gl::FALSE,
                                6 * mem::size_of::<GLfloat>() as GLint,
                                (3 * mem::size_of::<GLfloat>()) as *const GLvoid);
        gl::EnableVertexAttribArray(2);

        IcoRenderer {
            vao: vao,
            vbo: vbo
        }
    }

    pub unsafe fn set_up(&self, shader_program: &Shader) {
        shader_program.set_bool(c_str!("rat"), false);
        shader_program.set_bool(c_str!("shaded"), true);
    }

    pub unsafe fn draw(&self, shader_program: &Shader, ico: &Ico, t: f32) {

        gl::BindVertexArray(self.vao);

        let model = Matrix4::from_translation(ico.pos) *
                    Matrix4::from_axis_angle(ico.axis, Deg(t * 100.0)) *
                    Matrix4::from_scale(0.25);
        shader_program.set_mat4(c_str!("model"), model);

        gl::DrawArrays(gl::TRIANGLES, 0, 60);
    }
}
